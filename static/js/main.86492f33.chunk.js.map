{"version":3,"sources":["component/alert/Alert.js","component/buttons/utils.js","component/calculator/Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["Alert","message","className","digitType","operatorType","digitName","operatorName","Calculator","useState","expression","setExpression","result","setResult","memoryvalue","setmemoryvalue","alertDisplay","setAlertDisplay","handleClick","e","preventDefault","value","target","previousValue","length","toString","replace","setTimeout","Big","evaluate","toFixed","id","readOnly","placeholder","type","onClick","map","digitValue","digitId","key","operatorValue","operatorId","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.86492f33.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Alert.scss';\r\n\r\nconst Alert = ({ message }) => {\r\n\treturn <h1 className='alert'>{message}</h1>;\r\n};\r\n\r\nexport default Alert;\r\n","export const digitType = [\r\n\t'9',\r\n\t'8',\r\n\t'7',\r\n\t'6',\r\n\t'5',\r\n\t'4',\r\n\t'3',\r\n\t'2',\r\n\t'1',\r\n\t'.',\r\n\t'0'\r\n];\r\nexport const operatorType = ['/', '*', '+', '-'];\r\n\r\nexport const digitName = [\r\n\t'nine',\r\n\t'eight',\r\n\t'seven',\r\n\t'six',\r\n\t'five',\r\n\t'four',\r\n\t'three',\r\n\t'two',\r\n\t'one',\r\n\t'decimal',\r\n\t'zero'\r\n];\r\n\r\nexport const operatorName = ['divide', 'multiply', 'add', 'subtract', 'equals'];\r\n","import React, { Fragment, useState } from 'react';\r\nimport Alert from '../alert/Alert';\r\nimport { evaluate } from 'mathjs';\r\nimport { Big } from 'big.js';\r\n\r\nimport {\r\n\tdigitType,\r\n\toperatorType,\r\n\tdigitName,\r\n\toperatorName\r\n} from '../buttons/utils';\r\nimport './Calculator.scss';\r\n\r\nconst Calculator = () => {\r\n\t// expression state before evaluation\r\n\tconst [expression, setExpression] = useState('');\r\n\r\n\t// evaluation state\r\n\tconst [result, setResult] = useState(0);\r\n\r\n\t// memory used to deal with decimals\r\n\tconst [memoryvalue, setmemoryvalue] = useState(null);\r\n\r\n\t// alert divide by 0 not allowed\r\n\tconst [alertDisplay, setAlertDisplay] = useState(false);\r\n\r\n\tconst handleClick = e => {\r\n\t\te.preventDefault();\r\n\t\t// calculator key value to expression\r\n\t\tlet value = e.target.value;\r\n\r\n\t\t// expression previous value\r\n\t\tlet previousValue = expression[expression.length - 1];\r\n\r\n\t\t// starting calculation with multiple 0 not allowed\r\n\t\tif (expression === '' && value === '0') {\r\n\t\t\treturn expression;\r\n\t\t}\r\n\r\n\t\t// starting calculation with 0 after clearAll not allowed\r\n\t\tif (expression === 0 && value !== '0') {\r\n\t\t\tsetExpression(expression.toString().replace(expression, '') + value);\r\n\t\t\tsetResult(value);\r\n\t\t}\r\n\r\n\t\t// if one dot, decimal allowed\r\n\t\tif (\r\n\t\t\texpression !== 0 &&\r\n\t\t\texpression !== '0' &&\r\n\t\t\tpreviousValue !== '.' &&\r\n\t\t\tvalue === '.'\r\n\t\t) {\r\n\t\t\tsetExpression(expression + value);\r\n\t\t\tsetResult(value);\r\n\t\t\tsetmemoryvalue(1);\r\n\t\t}\r\n\r\n\t\t// two dots for one decimal not allowed\r\n\t\tif (\r\n\t\t\texpression !== 0 &&\r\n\t\t\texpression !== '0' &&\r\n\t\t\tmemoryvalue === 1 &&\r\n\t\t\tvalue === '.'\r\n\t\t) {\r\n\t\t\tsetExpression(expression + value.replace(value, ''));\r\n\t\t}\r\n\r\n\t\t// update of expression with a decimal & operator before any evaluation\r\n\t\tif (\r\n\t\t\texpression !== 0 &&\r\n\t\t\texpression !== '0' &&\r\n\t\t\tvalue !== '=' &&\r\n\t\t\tvalue !== '.' &&\r\n\t\t\t(value === '/' || value === '*' || value === '+' || value === '-')\r\n\t\t) {\r\n\t\t\tsetExpression(expression + value);\r\n\t\t\tsetResult(value);\r\n\t\t\tsetmemoryvalue(0);\r\n\t\t}\r\n\r\n\t\t// expression update with key value before any evaluation\r\n\t\tif (\r\n\t\t\texpression !== 0 &&\r\n\t\t\texpression !== '0' &&\r\n\t\t\tvalue !== '=' &&\r\n\t\t\tvalue !== '.'\r\n\t\t) {\r\n\t\t\tsetExpression(expression + value);\r\n\t\t\tsetResult(value);\r\n\t\t}\r\n\r\n\t\t// divide by 0 not allowed + respective alert\r\n\t\tif (\r\n\t\t\texpression !== 0 &&\r\n\t\t\texpression !== '0' &&\r\n\t\t\tpreviousValue === '/' &&\r\n\t\t\tvalue === '0'\r\n\t\t) {\r\n\t\t\tsetExpression(expression + value.replace(value, ''));\r\n\t\t\tsetResult(value);\r\n\t\t\tsetAlertDisplay(true);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetAlertDisplay(false);\r\n\t\t\t}, 3000);\r\n\t\t}\r\n\r\n\t\t// equals sign cannot follow an operator\r\n\t\tif (\r\n\t\t\texpression !== 0 &&\r\n\t\t\texpression !== '0' &&\r\n\t\t\t(previousValue === '/' ||\r\n\t\t\t\tpreviousValue === '*' ||\r\n\t\t\t\tpreviousValue === '+' ||\r\n\t\t\t\tpreviousValue === '-') &&\r\n\t\t\tvalue === '='\r\n\t\t) {\r\n\t\t\treturn expression.replace(previousValue, '');\r\n\t\t}\r\n\r\n\t\t// last operator replaces previous operator\r\n\t\tif (\r\n\t\t\texpression !== 0 &&\r\n\t\t\texpression !== '0' &&\r\n\t\t\tvalue !== '=' &&\r\n\t\t\tvalue !== '.' &&\r\n\t\t\t(previousValue === '/' ||\r\n\t\t\t\tpreviousValue === '*' ||\r\n\t\t\t\tpreviousValue === '+') &&\r\n\t\t\t(value === '/' || value === '*' || value === '+')\r\n\t\t) {\r\n\t\t\tsetExpression(expression.replace(previousValue, '') + value);\r\n\t\t\tsetResult(value);\r\n\t\t}\r\n\r\n\t\t// expression update with result after evaluation\r\n\t\tif (\r\n\t\t\texpression !== 0 &&\r\n\t\t\texpression !== '0' &&\r\n\t\t\t(previousValue !== '/' ||\r\n\t\t\t\tpreviousValue !== '*' ||\r\n\t\t\t\tpreviousValue !== '+' ||\r\n\t\t\t\tpreviousValue !== '-') &&\r\n\t\t\tvalue === '='\r\n\t\t) {\r\n\t\t\tsetExpression((Big(evaluate(expression)).toFixed(4) * 1).toString());\r\n\t\t\tsetResult((Big(evaluate(expression)).toFixed(4) * 1).toString());\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleClearAll = () => {\r\n\t\tsetExpression(0);\r\n\t\tsetResult(0);\r\n\t\tsetmemoryvalue(0);\r\n\t};\r\n\r\n\tconst handleClearEntry = () => {\r\n\t\tlet previousValue = expression[expression.length - 1];\r\n\t\tif (expression[expression.length - 2] === '-') {\r\n\t\t\tpreviousValue = previousValue * -1;\r\n\t\t}\r\n\t\tsetExpression(expression.replace(previousValue, ''));\r\n\t\tsetResult(0);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<input\r\n\t\t\t\tid='display'\r\n\t\t\t\tclassName='expression'\r\n\t\t\t\treadOnly\r\n\t\t\t\tvalue={expression}\r\n\t\t\t\tplaceholder='0'\r\n\t\t\t/>\r\n\t\t\t<input className='result' readOnly value={result} placeholder='0' />\r\n\t\t\t<div className='buttons-container'>\r\n\t\t\t\t<div className='clear-buttons'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='clear'\r\n\t\t\t\t\t\tclassName='button'\r\n\t\t\t\t\t\ttype='clear-all'\r\n\t\t\t\t\t\tvalue='AC'\r\n\t\t\t\t\t\tonClick={handleClearAll}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tAC\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tid='clear-entry'\r\n\t\t\t\t\t\tclassName='button'\r\n\t\t\t\t\t\ttype='clear-entry'\r\n\t\t\t\t\t\tvalue='C'\r\n\t\t\t\t\t\tonClick={handleClearEntry}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tC\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='digits'>\r\n\t\t\t\t\t{digitType &&\r\n\t\t\t\t\t\tdigitType.map((digitValue, digitId) => (\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tid={digitName[digitId]}\r\n\t\t\t\t\t\t\t\tclassName='button'\r\n\t\t\t\t\t\t\t\tkey={digitId}\r\n\t\t\t\t\t\t\t\ttype='digitType'\r\n\t\t\t\t\t\t\t\tvalue={digitValue}\r\n\t\t\t\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{digitValue}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='operators'>\r\n\t\t\t\t\t{operatorType &&\r\n\t\t\t\t\t\toperatorType.map((operatorValue, operatorId) => (\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tid={operatorName[operatorId]}\r\n\t\t\t\t\t\t\t\tclassName='button'\r\n\t\t\t\t\t\t\t\tkey={operatorId}\r\n\t\t\t\t\t\t\t\ttype='operatorType'\r\n\t\t\t\t\t\t\t\tvalue={operatorValue}\r\n\t\t\t\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{operatorValue}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tid='equals'\r\n\t\t\t\t\tclassName='button'\r\n\t\t\t\t\ttype='equalsign'\r\n\t\t\t\t\tvalue='='\r\n\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t\tmemoryvalue={memoryvalue}\r\n\t\t\t\t>\r\n\t\t\t\t\t=\r\n\t\t\t\t</button>\r\n\t\t\t\t{alertDisplay ? <Alert message='Divide by 0 is not possible' /> : null}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default Calculator;\r\n","import React from 'react';\r\nimport Calculator from './component/calculator/Calculator';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className='app-container'>\r\n\t\t\t<Calculator />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}